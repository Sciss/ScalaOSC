h2. ScalaOSC ==<small>-- version 0.24 SNAPSHOT --</small>==

*WARNING:* This is an unfinished new version. Please use the 0.23 git tag for the latest full version.

h3. statement

ScalaOSC is an OpenSoundControl (OSC) library for the Scala programming language. It is (C)opyright 2008&ndash;2011 by Hanns Holger Rutz. All rights reserved. ScalaOSC is released under the "GNU Lesser General Public License":http://www.sciss.de/scalaOSC/licenses/ScalaOSC-License.txt and comes with absolutely no warranties. To contact the author, send an email to @contact at sciss.de@

h3. requirements / installation

ScalaOSC currently cross-builds against Scala 2.9.1 (default), 2.9.0, and 2.8.1. It uses the I/O API from Java 1.6. Use the "NetUtil":http://www.sciss.de/netutil/ Java OSC library if you require compatibility with Java SE 1.4.

ScalaOSC builds with sbt 0.10 (xsbt), and also contains a project file for Intellij IDEA 10 CE

The standard sbt targets are:

* @clean@ -- removes previous build artefacts
* @compile@ -- compiles classes into target/scala-version/classes
* @doc@ -- generates api in target/scala-version/api/index.html
* @package@ -- packages jar in target/scala-version
* @run@ __arguments...__ -- prints info when run without arguments

h3. overview

OpenSoundControl (OSC) is a protocol to exchange messages between systems, typically over a network using UDP or TCP, and typically to control sound or multimedia applications.

OSC can be used to control sound software -- for example "SuperCollider Server":http://supercollider.sf.net/ was one of the first systems to use OSC --, but also to communicate with hardware controllers.

OSC is a generic protocol and not restricted to sound applications: For example, "SwingOSC":http://www.sciss.de/swingOSC/ uses OSC to provide network access to the Java Virtual Machine.

For more information, known implementations and the protocol standard, visit "opensoundcontrol.org":http://opensoundcontrol.org/.

h3. implementation

ScalaOSC currently provides single ended channels (@Transmitter@ to send messages and @Receiver@ to run a receiving loop), as well as single sockets in bidirectional mode (@Client@).

The supported transports are UDP and TCP. A TCP server option is currently missing. If you need one, have a look at "NetUtil":http://www.sciss.de/netutil/.

ScalaOSC comes with a codec conforming with the strict "OSC 1.0 specification":http://opensoundcontrol.org/spec-1_0, as well as allowing for the optional types @h@ (64-bit integer), @d@ (64-bit floating point) and encoding OSC packets themselves as @b@ blobs, as used by SuperCollider. The codecs are customizable, thus support for other tags such as the booleans @T@ and @F@, characters @c@ or arrays @[ ]@ should be possible.

h3. documentation and examples

A very brief example showing two UDP clients playing ping-pong:

pre. import de.sciss.osc

val ping = UDP.Client() // do not bind to any target address
val pong = UDP.Client( ping.localSocketAddress )
ping.connect()
pong.connect()

val t = new java.util.Timer()
def delay( secs: Double )( code: => Unit ) {
   t.schedule( new java.util.TimerTask { def run { code }}, (secs * 1000).toInt )
}

ping.action = {
   case (packet, sender) =>
      println( "Ping received: " + p )
      delay( 1 ) { send( "PONG", sender )}
}
var cnt = 0
pong.action = {
   case packet =>
      println( "Pong received: " + p )
      cnt += 1
      if( cnt < 10 ) delay( 1 ) { ! "PING" }
}

Further examples can be found in the headers of the API docs, e.g. by looking up the documentation for @UDP.Client@.

ScalaOSC is used in the "ScalaCollider":http://www.sciss.de/scalaCollider/ project, so you may take a look at its usage there.

h3. todo

A TCP server is planned, as well as a file protocol conforming to SuperCollider's binary OSC file format. The latter will probably result in the addition of a @osc.Reader@ class which will be encapsulated by @osc.Receiver@. Thus, @osc.Transmitter@ might be renamed to @osc.Writer@, as it is synchronous and not threaded.

h3. download

The website is at "www.sciss.de/scalaOSC":http://www.sciss.de/scalaOSC/.
The current version can be downloaded from "github.com/Sciss/ScalaOSC":http://github.com/Sciss/ScalaOSC.
